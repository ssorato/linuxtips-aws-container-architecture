---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: health-api
  namespace: nutrition
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "health.yourdomain.com"

---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: health-api
  namespace: nutrition
spec:
  hosts:
  - "health-api.nutrition.svc.cluster.local"
  - "health.yourdomain.com"
  gateways:
  - health-api
  http:
  - route:
    - destination:
        host: health-api
        port:
          number: 8080 

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: health-api
  name: health-api
  namespace: nutrition
spec:
  replicas: 2
  selector:
    matchLabels:
      app: health-api
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
      labels:
        app: health-api
        name: health-api
        version: v1
    spec:
      serviceAccountName: nutrition
      containers:
      - image: fidelissauro/health-api:latest
        name: health-api
        env:
        - name: ENVIRONMENT
          value: "dev"
        - name: ZIPKIN_COLLECTOR_ENDPOINT
          value: http://jaeger-collector.tracing.svc.cluster.local:9411/api/v2/spans          
        - name: BMR_SERVICE_ENDPOINT
          value: "bmr-grpc.nutrition.svc.cluster.local:30000"
        - name: IMC_SERVICE_ENDPOINT
          value: "imc-grpc.nutrition.svc.cluster.local:30000"
        - name: RECOMMENDATIONS_SERVICE_ENDPOINT
          value: "recommendations-grpc.nutrition.svc.cluster.local:30000"
        # Configs do Health-data-offload
        - name: MESSAGE_TYPE
          value: "sqs"
        - name: SQS_QUEUE_URL
          value: "your_sqs_queue_url"                              
        ports:
        - containerPort: 8080
          name: http   
        startupProbe:
          failureThreshold: 10
          httpGet:
            path: /healthcheck
            port: 8080
          periodSeconds: 10
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /healthcheck
            port: 8080          
      terminationGracePeriodSeconds: 60

---
apiVersion: v1
kind: Service
metadata:
  name: health-api
  namespace: nutrition
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"    
  labels:
    app.kubernetes.io/name: health-api
    app.kubernetes.io/instance: health-api 
spec:
  ports:
  - name: web
    port: 8080
    protocol: TCP
  selector:
    app: health-api
  type: ClusterIP
