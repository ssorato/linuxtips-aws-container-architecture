name: CI/CD Pipeline - day6

# workflow triggered manually
on: workflow_dispatch

# workflow triggered on branch master and on terraform/day6/app/ changes
# on:
#   push:
#     branches:
#       - master
#     paths:
#       - terraform/day6/app/**

env:
  REPOSITORY_PATH: "linuxtips"
  APP_NAME: "linuxtips-app"
  CLUSTER_NAME: "ecs-linuxtips"
  TF_ENV_NAME: "dev"
  AWS_REGION: "us-east-1"


jobs:
  app-ci:
    name: Application CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: |
            terraform/day6/app/go.sum

      - name: Install GoLint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.59.1

      - name: Lint App
        run: |
          golangci-lint run ./... -E errcheck
        working-directory: ./terraform/day6/app

      - name: Test App
        run: go test ./...
        working-directory: ./terraform/day6/app

  infra-ci:
    runs-on: ubuntu-latest
    name: Infrastructure CI
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Build backend.tfvars
        run: |
          cat <<EOT > environment/${{ env.TF_ENV_NAME }}/backend.tfvars
          bucket         = "${{ secrets.S3_BUCKET_NAME}}"
          key            = "${{ secrets.S3_KEY_ROOT_PATH}}/day6.tfstate"
          dynamodb_table = "${{ secrets.DYNAMODB_TABLE_NAME }}"
          region         = "${{ env.AWS_REGION }}"
          EOT
        working-directory: ./terraform/day6/terraform

      - name: Terraform fmt check
        run: |
          terraform fmt --recursive --check
        working-directory: ./terraform/day6/terraform

      - name: Terraform init
        run: |
          terraform init -backend-config=environment/${{ env.TF_ENV_NAME }}/backend.tfvars
        working-directory: ./terraform/day6/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:  ${{ env.AWS_REGION }}

      - name: Terraform Validate
        run: |
          terraform validate
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:  ${{ env.AWS_REGION }}

  build-push-app:
    runs-on: ubuntu-latest
    name: Build application and push container image to the ECR
    needs:
      - app-ci
      - infra-ci
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:  ${{ env.AWS_REGION }}

      - name: Create ECR repository if not exists
        run: |
          set +e

          # Check if repository already exists
          REPO_EXISTS=$(aws ecr describe-repositories --repository-names $REPOSITORY_NAME 2>&1)

          if [[ $REPO_EXISTS == *"RepositoryNotFoundException"* ]]; then
            echo "Repository $REPOSITORY_NAME not found. Creating ..."
            
            # Create the repository
            aws ecr create-repository --repository-name $REPOSITORY_NAME
            
            if [ $? -eq 0 ]; then
              echo "Repository $REPOSITORY_NAME created successfully."
            else
              echo "Error on creating the repository $REPOSITORY_NAME."
              exit 1
            fi
          else
            echo "Repository $REPOSITORY_NAME already exists."
          fi

          set -e
        env:
          REPOSITORY_NAME: "${{ env.REPOSITORY_PATH }}/${{ env.APP_NAME }}"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Build container image
        run: |
          docker buildx build --platform linux/amd64 -t app . 
        working-directory: ./terraform/day6/app

      # The default environment variables that GitHub sets
      # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#default-environment-variables
      - name: Tag container image
        run: |
          docker tag app:latest ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.us-east-1.amazonaws.com/$REPOSITORY_NAME:${GITHUB_SHA::8}
        working-directory: ./terraform/day6/app
        env:
          REPOSITORY_NAME: "${{ env.REPOSITORY_PATH }}/${{ env.APP_NAME }}"

      - name: Push container image to the ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.us-east-1.amazonaws.com/$REPOSITORY_NAME:${GITHUB_SHA::8}
        working-directory: ./terraform/day6/app
        env:
          REPOSITORY_NAME: "${{ env.REPOSITORY_PATH }}/${{ env.APP_NAME }}"

  infra-cd:
    runs-on: ubuntu-latest
    name: Infrastructure CD
    needs:
      - build-push-app
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4      
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Build backend.tfvars
        run: |
          cat <<EOT > environment/${{ env.TF_ENV_NAME }}/backend.tfvars
          bucket         = "${{ secrets.S3_BUCKET_NAME}}"
          key            = "${{ secrets.S3_KEY_ROOT_PATH}}/day6.tfstate"
          dynamodb_table = "${{ secrets.DYNAMODB_TABLE_NAME }}"
          region         = "${{ env.AWS_REGION }}"
          EOT
        working-directory: ./terraform/day6/terraform

      - name: Terraform init
        run: |
          terraform init -backend-config=environment/${{ env.TF_ENV_NAME }}/backend.tfvars
        working-directory: ./terraform/day6/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:  ${{ env.AWS_REGION }}

      - name: Terraform plan
        run: |
          terraform plan \
            -var-file=environment/${{ env.TF_ENV_NAME }}/terraform.tfvars \
            -var container_image=${{ secrets.AWS_ACCOUNT }}.dkr.ecr.us-east-1.amazonaws.com/$REPOSITORY_NAME:${GITHUB_SHA::8} \
            -var alb_ingress_cidr_enabled=${{ secrets.ALB_INGRESS_CIDR_ENABLED }}
        working-directory: ./terraform/day6/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:  ${{ env.AWS_REGION }}
          REPOSITORY_NAME: "${{ env.REPOSITORY_PATH }}/${{ env.APP_NAME }}"

      - name: Terraform Apply
        run: |
          terraform apply \
            --auto-approve \
            -var-file=environment/${{ env.TF_ENV_NAME }}/terraform.tfvars \
            -var container_image=${{ secrets.AWS_ACCOUNT }}.dkr.ecr.us-east-1.amazonaws.com/$REPOSITORY_NAME:${GITHUB_SHA::8} \
            -var alb_ingress_cidr_enabled=${{ secrets.ALB_INGRESS_CIDR_ENABLED }}
        working-directory: ./terraform/day6/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:  ${{ env.AWS_REGION }}
